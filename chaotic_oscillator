import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt

def logistic_map(r, x, n):
    sequence = [x]
    for _ in range(n-1):
        x = r * x * (1 - x)
        sequence.append(x)
    return np.array(sequence)

# set parameters
duration = 20  # seconds
sample_rate = 44100
r = 3.99  # chaos parameter
x0 = 0.5 + np.random.uniform(-0.1, 0.1)  # random initial condition
print(f"Initial value x0 = {x0}")

# generate chaotic sequence
n_points = int(duration * 20)  # 20 tones per second
chaotic_seq = logistic_map(r, x0, n_points)

# audio generation
def generate_tone(freq, duration, sample_rate):
    t = np.linspace(0, duration, int(sample_rate * duration), False)
    return np.sin(2 * np.pi * freq * t)

audio = np.array([])
tone_duration = 0.05  # 50 ms per tone
for value in chaotic_seq:
    freq = 200 + 1000 * value  # map to frequency range 200-1200 Hz
    tone = generate_tone(freq, tone_duration, sample_rate)
    audio = np.concatenate((audio, tone))

# ensure the audio length matches the desired duration
target_samples = int(duration * sample_rate)
if len(audio) < target_samples:
    audio = np.pad(audio, (0, target_samples - len(audio)), 'constant')
elif len(audio) > target_samples:
    audio = audio[:target_samples]

# normalize and convert to 16-bit pulse-code modulation
audio = audio / np.max(np.abs(audio))
audio = (audio * 32767).astype(np.int16)

# save audio with a unique filename
filename = f'chaotic_melody_{x0:.4f}.wav'
wavfile.write(filename, sample_rate, audio)
print(f"Chaotic melody generated and saved as '{filename}'")
print(f"Audio duration: {len(audio) / sample_rate:.2f} seconds")

# visualization
plt.figure(figsize=(12, 8))
x = np.linspace(0, 1, 1000)
y = r * x * (1 - x)
plt.plot(x, y, 'b', label=f'y = {r}x(1-x)')
plt.plot(x, x, 'k--', label='y = x')
plt.plot(chaotic_seq[:-1], chaotic_seq[1:], 'r.', markersize=3, label='Chaotic sequence')
plt.title(f"Logistic Map: x[n+1] = {r}x[n](1-x[n]), x0 = {x0:.6f}")
plt.xlabel("x[n]")
plt.ylabel("x[n+1]")
plt.legend()
plt.grid(True)
plot_filename = f'logistic_map_{x0:.4f}.png'
plt.savefig(plot_filename)
print(f"Logistic map visualization saved as '{plot_filename}'")
plt.close()

print(f"First 10 values of chaotic sequence: {chaotic_seq[:10]}")
